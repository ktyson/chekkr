==My Goals==
#Unit and Automated Acceptance Tests
#Diagrams based on UML
#Continuous Integration with Git
#Documentation with Wiki
#Selected Agile practices
#Metrics that Matter



Tests



Sikuli 


Selenium/Nightwatch smoke tests 

==Node.js Nightwatch Smoke Testing==


nightwatch plus selenium


*install node
*install selenium
*set up initial folder and file structure (instructions at nightwatch site)

start selenium

git bash - go to selenium folder

java -jar selenium-server-standalone-2.42.0.jar

start tests

git bash 2 - go to nightwatch folder

node nightwatch.js






Diagramming

Types:
*Class UML
*Table Schema (ERD)
**work on the class title creation so is easier to handle in ss


==UML and Schema Diagrams==

===To Create a Table Schema===


# In Oracle, build a query based on ora_schema_queries to get the tables you want
# Cut and paste from results grid to a spreadsheet
# Save the spreadsheet into the correct makeSchema folder and name it tables (+identifier) .xlsx
# Do same steps for Constraints
# When both spreadsheets are available, go in to makeSchema .js and point the table, constraint fields to 

those names
# In makeSchemaJson.js set the isUmlClassDiagram to false
# Run to make a new newSchema.gliffy file

===To Create a UML Class Diagram===

# In node, run the fileTrawl Create UmlSchema program
## open git bash 
## set the start variable in fileWalk.js to desired folder to walk every file under that folder to grab the 

classes you want
### Example:
    var start = '/Projects_Karl/TDSAdmin/src/java/com/bombardier/client/assets';
## run node fileWalk.js. It will generate the uml_schema.js containing json data on classes
## run createUmlSchemaXSLOutput.js
### It looks at uml_schema.js 
### The program will write data for each class to the console (terminal window)
# Cut and paste the output to a spreadsheet B column 
## Take the header line and cut and paste it into the A column for all the details for that class
### Note: The table should mimic the first two columns of a Table Schema spreadsheet
# Switch to the schemaMaker/ folder
## In makeSchema .js point the table to the class spreadsheet, and constraint fields to empty.xlsx
## In makeSchemaJson.js set the isUmlClassDiagram to true
# Run to make a new newSchema.gliffy file



=Cleanup Rubrik=

==Short List==
#Check all paper notes - transfer into wiki or to-do or Acros 
#Review all desktop files - delete or move to appropriate Task folders where possible 
#Review all followup flagged email - take off flag by doing, documenting, or making a ToDo 
#Cleanup and update Wiki Open Projects
#Move draft wiki articles out to public wiki
#Check TSF and plan implementations
#Check and clean up all Web Favorites (home base = IE)

==Long List==
#Check each Task Notes folder - review and incorporate into formal docs/wiki where possib;e 
##Try to assign date or tasknumber based names to folders inside main app or subject 
#Review and update home base wiki 
##Move completed articles to their own area in main wiki
#Work on paper project notebooks







Tools To Review

backbone.js 
ember.js 
Meteor 
AngularJS 
Tower.js (on node.js) 
handlebars 
mustache 
DoT.js 
DOM snippets 
Web Components 
REGULAR JavaScript 
CofeeScript 
Coco 
LiveScript 
DART 
GWT 
Ruby on Rails 
Grails 
Groovy 
Roo 
node.js 
mongodb 
PHP 
Java 
Lisp 
Clojure 
Bridge / protocol buffers / thrift implementation language agnostic 
Haskell 
Scala/Lift/Play 
JSON RESTful services 
SQL database 
